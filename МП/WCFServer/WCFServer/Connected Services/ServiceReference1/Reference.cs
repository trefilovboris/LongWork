//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCFServer.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CommandResult", Namespace="http://schemas.datacontract.org/2004/07/WCFServer")]
    [System.SerializableAttribute()]
    public partial class CommandResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CodeCommandField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] DataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstParametrField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsSuccesedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] ResultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SecondParametrField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CodeCommand {
            get {
                return this.CodeCommandField;
            }
            set {
                if ((this.CodeCommandField.Equals(value) != true)) {
                    this.CodeCommandField = value;
                    this.RaisePropertyChanged("CodeCommand");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Data {
            get {
                return this.DataField;
            }
            set {
                if ((object.ReferenceEquals(this.DataField, value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Error {
            get {
                return this.ErrorField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorField, value) != true)) {
                    this.ErrorField = value;
                    this.RaisePropertyChanged("Error");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstParametr {
            get {
                return this.FirstParametrField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstParametrField, value) != true)) {
                    this.FirstParametrField = value;
                    this.RaisePropertyChanged("FirstParametr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSuccesed {
            get {
                return this.IsSuccesedField;
            }
            set {
                if ((this.IsSuccesedField.Equals(value) != true)) {
                    this.IsSuccesedField = value;
                    this.RaisePropertyChanged("IsSuccesed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Result {
            get {
                return this.ResultField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultField, value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SecondParametr {
            get {
                return this.SecondParametrField;
            }
            set {
                if ((object.ReferenceEquals(this.SecondParametrField, value) != true)) {
                    this.SecondParametrField = value;
                    this.RaisePropertyChanged("SecondParametr");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ICommand", CallbackContract=typeof(WCFServer.ServiceReference1.ICommandCallback))]
    public interface ICommand {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommand/Execute", ReplyAction="http://tempuri.org/ICommand/ExecuteResponse")]
        WCFServer.ServiceReference1.CommandResult Execute(WCFServer.ServiceReference1.CommandResult command);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommand/Execute", ReplyAction="http://tempuri.org/ICommand/ExecuteResponse")]
        System.Threading.Tasks.Task<WCFServer.ServiceReference1.CommandResult> ExecuteAsync(WCFServer.ServiceReference1.CommandResult command);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICommandCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICommand/Callback")]
        void Callback(string message, byte[] data, int codeCommand);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICommandChannel : WCFServer.ServiceReference1.ICommand, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CommandClient : System.ServiceModel.DuplexClientBase<WCFServer.ServiceReference1.ICommand>, WCFServer.ServiceReference1.ICommand {
        
        public CommandClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public CommandClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public CommandClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public CommandClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public CommandClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public WCFServer.ServiceReference1.CommandResult Execute(WCFServer.ServiceReference1.CommandResult command) {
            return base.Channel.Execute(command);
        }
        
        public System.Threading.Tasks.Task<WCFServer.ServiceReference1.CommandResult> ExecuteAsync(WCFServer.ServiceReference1.CommandResult command) {
            return base.Channel.ExecuteAsync(command);
        }
    }
}
